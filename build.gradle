buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {url= "http://artifactory.gking2224.me/artifactory/libs-release" }
        maven {url= "http://artifactory.gking2224.me/artifactory/libs-snapshot" }
    }
    dependencies {
        classpath "me.gking2224:BuildToolsGradlePlugin:0.1.3-SNAPSHOT"
    }
}

plugins {
  id 'groovy'
}

apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'me.gking2224.buildtools'

task "s"
jar {
    
}

println System.getProperty("system.aws.accessKeyId")
println System.getProperty("aws.accessKeyId")
println project["aws.accessKeyId"]
ext {
    artifactId = "me.gking2224.awsplugin.artifactid" // what does this do?
    defaultEncoding = "UTF-8"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}


// versions
ext {
    // using this version to be compatible with gradleApi(), which adds its own version and causes conflicts
    // see https://issues.gradle.org/browse/GRADLE-2516
    awsJavaSdkVersion = "1.9.19"
    junitVersion = '4.11'
}

dependencies {
    
    compile gradleApi()
    compile localGroovy()
    testCompile group: 'junit', name: 'junit', version: junitVersion
    
    compile "com.amazonaws:aws-java-sdk-ec2:$awsJavaSdkVersion"
    compile "com.amazonaws:aws-java-sdk-iam:$awsJavaSdkVersion"
    
}

configurations {
  published
}

task writeNewPom << {
    pom {
        project {
            inceptionYear '2016'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("$mavenPomDir/pom-default.xml")
}

eclipse {
    project {
        buildCommand 'org.eclipse.jdt.core.javabuilder'
        buildCommand 'org.springframework.ide.eclipse.core.springbuilder'
        natures 'org.eclipse.jdt.core.javanature',
                'org.springsource.ide.eclipse.gradle.core.nature',
                'org.springframework.ide.eclipse.core.springnature'
    }
    classpath {
        defaultOutputDir = file('build/classes')
        containers = [
            'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8',
            'org.springsource.ide.eclipse.gradle.classpathcontainer'  // Gradle IDE classpath container
        ]
        file {
            // exclude jar entries from .classpath
            whenMerged { classpath ->
                classpath.configure classpath.entries.grep { entry ->
                    !(entry instanceof org.gradle.plugins.ide.eclipse.model.Library)
                }
                classpath.entries.findAll {
                    it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("src/test/")
                }*.output = "build/test-classes"
                classpath.entries.findAll {
                    it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("src/integration/")
                }*.output = "build/integration-classes"
            }
        }
        downloadSources = true
        downloadJavadoc = true
    }
}
